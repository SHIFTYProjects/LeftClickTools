
# Name: Left Click Tools
# Description: Powershell Left Click Tools 
# Author: Josh Hochstettler 
# 
#




#######################################################
#           List of features to add
####################################################### 
# 
#
#
#
#######################################################


$ErrorActionPreference = 'SilentlyContinue'


#######       FORM SETUP       #######

Add-Type -AssemblyName System.Windows.Forms
$wshell = New-Object -comObject Wscript.Shell
[System.Windows.Forms.Application]::EnableVisualStyles()
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null

#######       FORM SIZE       #######

$Form = New-Object system.Windows.Forms.Form
$Form.ClientSize = '1270,600' #Width,Height
$form.BackColor = ''
$Form.text = "LEFT CLICK TOOLS"
$Form.FormBorderStyle = 'Fixed3D'
$Form.MaximizeBox = $false
$Form.TopMost = $false


# Create an output box
$outputBox = New-Object System.Windows.Forms.TextBox
$outputBox.Multiline = $true
$outputBox.ScrollBars = "Vertical"
$outputBox.Location = New-Object System.Drawing.Point(580, 10)
$outputBox.Size = New-Object System.Drawing.Size(350, 440)
$form.Controls.Add($outputBox)




#Add a Background image to the form using Base64.  Put your image in between the quotes on the next line
$base64ImageString = ""
$imageBytes = [Convert]::FromBase64String($base64ImageString)
$ms = New-Object IO.MemoryStream($imageBytes, 0, $imageBytes.Length)
$ms.Write($imageBytes, 0, $imageBytes.Length);
$objImage = [System.Drawing.Image]::FromStream($ms, $true)
$Form.BackgroundImage = $objImage
$Form.BackgroundImageLayout = "Stretch"
# None, Tile, Center, Stretch, Zoom


#Set icon for form using Base64 as an Embedded Image
$base64IconString = "
"
$iconimageBytes = [Convert]::FromBase64String($base64IconString)
$ims = New-Object IO.MemoryStream($iconimageBytes, 0, $iconimageBytes.Length)
$ims.Write($iconimageBytes, 0, $iconimageBytes.Length);
$alkIcon = [System.Drawing.Image]::FromStream($ims, $true)
$Form.Icon = [System.Drawing.Icon]::FromHandle((new-object System.Drawing.Bitmap -argument $ims).GetHIcon())









################## CONTROL FUNCTIONS########################################################

# Activity Log (Saves to user's Desktop)
$logLocation = [Environment]::GetFolderPath("Desktop") + "\Left Click Log.txt"
function logAction ($action) {
  $dateTime = Get-Date
  Add-Content "$logLocation" "$dateTime | $action"
}
# Imports line items from a .txt document list.
function importList {
  logAction "Importing item list from text document."
  $outputBox.AppendText("Importing item list from text document." + [Environment]::NewLine)
  $initialDirectory = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::Desktop)
  $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
  $OpenFileDialog.initialDirectory = $initialDirectory
  $OpenFileDialog.filter = "All files (*.*)| *.*"
  $OpenFileDialog.ShowDialog() | Out-Null
  $selectedFile = $OpenFileDialog.filename
  $computerList = Get-Content $selectedFile
  foreach ($computer in $computerList) {
    $itemList.Items.Add($computer)
    logAction "$computer was added to the item list. (Imported from file)"
    $outputBox.AppendText("$computer was added to the item list. (Imported from file)" + [Environment]::NewLine)
  }
        
}

# Adds single user input item to item list.
function addList {

  $computerName = [Microsoft.VisualBasic.Interaction]::InputBox('Enter a Hostname/IP', 'Add Item')
  $itemList.Items.Add($computerName)
  logAction "$computerName was added to the item list. (Added manually)"
  $outputBox.AppendText("$computerName was added to the item list. (Added manually)" + [Environment]::NewLine)
}

# Removes the currently selected item from the item list.
function removeList {
  $computerName = $itemList.SelectedItem
  logAction "$computerName was removed from the item list."
  $outputBox.AppendText("$computerName was removed from the item list." + [Environment]::NewLine)
  $index = $itemList.SelectedIndex
  $itemList.Items.RemoveAt($index)

}
# Clears all items from the list.
function clearList {
  logAction "All items cleared from list."
  $outputBox.AppendText("All items cleared from list." + [Environment]::NewLine)
  $itemList.Items.Clear()
}
function setFilePath {
  $initialDirectory = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::Desktop)
  $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
  $OpenFileDialog.initialDirectory = $initialDirectory
  $OpenFileDialog.filter = "All files (*.*)| *.*"
  $OpenFileDialog.ShowDialog() | Out-Null
  $filePath = $OpenFileDialog.filename
  $filePathBox.text = $filePath
}

#######       END OF CONTROL FUNCTIONS       #######
####################################################




#######       START OF BUTTON FUNCTIONS       #######


# Activates the main function of the tool, targeting each item on the item list.
function pingTool {
  logAction "Ping Tool Started."
  $outputBox.AppendText("Ping Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Are you sure you want to proceed?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
      $outputBox.AppendText("User confirmed process execution." + [Environment]::NewLine)
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Pinging $item"
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)
            $statusText.text = "$item ONLINE"

                        
            #INSERT SCRIPT TO PERFORM HERE
                        
          }
          Else {logAction "$item OFFLINE"
            $outputBox.AppendText("$item OFFLINE" + [Environment]::NewLine)
            $statusText.text = "Item Offline"
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "Ping Attempted."
      $outputBox.AppendText("Ping Attempted." + [Environment]::NewLine)
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
  }

  function setFilePath {
    $initialDirectory = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::Desktop)
    $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $OpenFileDialog.initialDirectory = $initialDirectory
    $OpenFileDialog.filter = "All files (*.*)| *.*"
    $OpenFileDialog.ShowDialog() | Out-Null
    $filePath = $OpenFileDialog.filename
    $filePathBox.text = $filePath
  }


}


#################################################################################



# Activates the main function of the tool, targeting each item on the item list.
function Repair {
  logAction "Repair Started."
  $outputBox.AppendText("Repair Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Are you sure you want to attempt a Client Repair?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
      $outputBox.AppendText("Repair Started." + [Environment]::NewLine)
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Repair $item"
        $outputBox.AppendText("Repairing $item" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)


            #INSERT SCRIPT TO PERFORM HERE
                        
            $resutls = Invoke-Command -computerName $item -ScriptBlock {

              $COUNTER = 1
              DO {
                $SMS = Get-service -Name CcmExec | Out-Null
                Stop-Process -Name "CcmExec" -Force
                Start-Sleep -Seconds 30
                $SMS = Get-service -Name CcmExec
                $Status_Check = $SMS.Status
                if($Status_Check -eq 'Stopped') {
                  $COUNTER = 4
                }
                $COUNTER++
              } While ($COUNTER -le 3)
              $SMS.status
              if($SMS.status -eq 'Stopped') { 
                start -Wait 'C:\windows\ccm\ccmrepair.exe'  
                write-output "Client Repair Started"
                $outputBox.AppendText("Client Repair Started" + [Environment]::NewLine)
              } 
              Else {write-output "Repair Failed to start"}   
            } 
            logAction $resutls

                          
                         
            #INSERT SCRIPT TO PERFORM HERE
                        
          }
          Else {logAction "$item OFFLINE"
            $outputBox.AppendText("Item Offline" + [Environment]::NewLine)
          $statusText.text = "Item Offline"}

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      logAction "Repair Operation has completed."
      $outputBox.AppendText("Repair Operation has completed" + [Environment]::NewLine)
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $wshell.Popup("Finished Running.", 0, "Repair SCCM Tool")
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}



#################################################################################



function SmsStop {
  logAction "Attempting to Stop SMS Service on remote machine."
  $outputBox.AppendText("SmsStop Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("This will Stop the SMS service on selected PC's so you can run a repair from -Left Click Tools- or uninstall from SCCM After running.", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
            
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "STOP SMS ON $item"
        $outputBox.AppendText("STOP SMS ON $item" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)


            #INSERT SCRIPT TO PERFORM HERE
                        
            $resutls = Invoke-Command -computerName $item -ScriptBlock {

              $COUNTER = 1
              DO {
                $SMS = Get-service -Name CcmExec | Out-Null
                Stop-Process -Name "CcmExec" -Force
                Start-Sleep -Seconds 30
                $SMS = Get-service -Name CcmExec
                $Status_Check = $SMS.Status
                if($Status_Check -eq 'Stopped') {
                  $COUNTER = 4
                }
                $COUNTER++
              } While ($COUNTER -le 3)
              $SMS.status
              if($SMS.status -eq 'Stopped') { 
                           
                write-output "SMS CCMEXEC Service Stopped"
                $outputBox.AppendText("SMS CCMEXEC Service Stopped." + [Environment]::NewLine)
              } 
              Else {write-output "Failed to Stop Services."
              $outputBox.AppendText("Failed to Stop Services." + [Environment]::NewLine)}   
            } 
            logAction $resutls
            $outputBox.AppendText("$resutls" + [Environment]::NewLine)

                          
                         
            #INSERT SCRIPT TO PERFORM HERE
                        
          }
          Else {logAction "$item OFFLINE"
            $outputBox.AppendText("$item OFFLINE" + [Environment]::NewLine)
          $statusText.text = "Item Offline"}

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      $statusText.text = "Attempted to Stop SMS Service"
      logAction "Attempted to Stop SMS Service"
      $outputBox.AppendText("Attempted to Stop SMS Service" + [Environment]::NewLine)
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $wshell.Popup("Finished Running.", 0, "SCCM STOP Tool")
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined)" + [Environment]::NewLine)
    }
  }
}

#################################################################################


function PRINTCLR {
  logAction "Attempting to connect to Print Spooler Jobs."
  $outputBox.AppendText("PrintCLR Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("This will connect you to the print spooler folder to see if any jobs are pending.  If they are. Delete them to resolve print errors.  Anything in this printer folder can be deleted without causing problems.", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Connecting to Print Spooler Folder on $item"
        $outputBox.AppendText("Connecting to Print Spooler Folder on $item" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)


            #INSERT SCRIPT TO PERFORM HERE


                        
            ii -path \\$item.YourDomain.net\c$\Windows\System32\spool\PRINTERS
                          
                         
            #INSERT SCRIPT TO PERFORM HERE
                        
          }
          Else {logAction "$item OFFLINE"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item Offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
                    
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      logAction "Attempted to connect to Print Spooler Folder."
      $outputBox.AppendText("Attempted to connect to Print Spooler Folder." + [Environment]::NewLine)
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined)" + [Environment]::NewLine)
           
    }
  }
}
#################################################################################


function PUBLICDSK {
  logAction "Attempting to connect to Public Desktop."
  $outputBox.AppendText("Public Desktop Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Access Public Desktop on remote pc's?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Opening C:\Users\Public\Desktop on $item"
        $outputBox.AppendText("Opening C:\Users\Public\Desktop on $item" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)


            #INSERT SCRIPT TO PERFORM HERE


                        
            ii -path \\$item.YourDomain.net\c$\Users\Public\Desktop 
                          
                         
            #INSERT SCRIPT TO PERFORM HERE
                        
          }
          Else {logAction "$item OFFLINE"
            $outputBox.AppendText("$item OFFLINE" + [Environment]::NewLine)
            $statusText.text = "Item Offline"
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
                    
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      logAction "Public Desktop Connection attempted."

      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined)" + [Environment]::NewLine)
           
    }
  }
}



#################################################################################



function RemoteC {
  logAction "Attempting to connect to Remote C Drive."
  $outputBox.AppendText("Remote C: Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Access C Drive on remote pc's?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
      $outputBox.AppendText("Accessing C Drive on remote pc's." + [Environment]::NewLine)
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Opening C: on $item"
        $outputBox.AppendText("Opening C: on $item" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)


            #INSERT SCRIPT TO PERFORM HERE


                        
            ii -path \\$item.YourDomain.net\c$ 
                          
                         
            #INSERT SCRIPT TO PERFORM HERE
                        
          }
          Else {logAction "$item OFFLINE"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item OFFLINE" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
                    
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      logAction "Connect attempted."
      $outputBox.AppendText("Connect attempted." + [Environment]::NewLine)
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
           
    }
  }
}




#################################################################################


function RemoteU {
  logAction "Remote U: Action Clicked"
  $outputBox.AppendText("Remote U: Tool Started" + [Environment]::NewLine)
    


  #INSERT SCRIPT TO PERFORM HERE


                        
  ii -path \\asn.SharedDrive.net
                       
                       
                          
                         
  #INSERT SCRIPT TO PERFORM HERE
                        
}
                   
                   
#################################################################################

#function to check the MD5 Hash of a file

function HASH {
  logAction "Hash Tool Started"
  $outputBox.AppendText("Hash Tool Started." + [Environment]::NewLine)

  # Add Windows Forms assembly
  Add-Type -AssemblyName System.Windows.Forms

  # Create a new form
  $form = New-Object System.Windows.Forms.Form
  $form.StartPosition = 'CenterScreen'
  $form.Size = New-Object System.Drawing.Size(500,240) # Horizontal, Vertical
  $form.Text = "FILE SHA CHECKER"
  $form.BackColor = "white"

  # Create a label to prompt user to select a file
  $label = New-Object System.Windows.Forms.Label
  $label.Location = New-Object System.Drawing.Size(7,40) # Horizontal, Vertical
  $label.Size = New-Object System.Drawing.Size(330,35)
  $label.BackColor = "Transparent"
  $label.ForeColor = "black"
  $label.Text = "PLEASE SELECT A FILE TO GET HASH"
  $form.Controls.Add($label)

  # Create a button to select a file
  $button = New-Object System.Windows.Forms.Button
  $button.Text = 'Get file'
  $button.Location = '10,110' # Horizontal, Vertical
  $form.Controls.Add($button)

  # Create a textbox to display the selected file path
  $textbox = New-Object System.Windows.Forms.TextBox
  $textbox.Location = '100,110' # Horizontal, Vertical
  $textbox.Width += 50
  $form.Controls.Add($textbox)

  # Create an OK button
  $buttonOK = New-Object System.Windows.Forms.Button
  $buttonOK.Text = 'Ok'
  $buttonOK.Location = '10,140' # Horizontal, Vertical
  $buttonOK.DialogResult = 'OK'
  $form.Controls.Add($buttonOK)

  # Define button click event to select a file
  $button.add_Click({
      $ofd = New-Object system.windows.forms.Openfiledialog
      #$ofd.Filter =  'PDFs (*.pdf)|*.pdf' 
      $script:filename = 'Not found'
      if ($ofd.ShowDialog() -eq 'Ok') {
        $script:filename = $textbox.Text = $ofd.FileName
      }    
  })

  # Define OK button click event to get file hash
  $buttonOK.add_Click({
      # Get the file hash
      $hash = Get-FileHash $textbox.Text | Select-Object -ExpandProperty Hash
        

      # Show the file hash in a message box
      #[System.Windows.Forms.MessageBox]::Show("The file hash is: $hash", "File Hash")
      logAction "FILE:"
      logAction ($textbox.text)
      logAction "HASH:"
      logAction ($hash)
       
      $outputBox.AppendText($textbox.text + [Environment]::NewLine)
      $outputBox.AppendText("Hash:$hash" + [Environment]::NewLine)
       
        
  })

  # Show the form as a dialog
  $form.ShowDialog() | Out-Null
    


}





#################################################################################
    

# Activates the main function of the tool, targeting each item on the item list.
function Restart {
  logAction "Restart started."
  $outputBox.AppendText("Restart Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Are you sure you want to restart all pc's?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
             
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Restarting $item"
        $outputBox.AppendText("Restart Started" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE
                       
            Restart-Computer -ComputerName $item -Force
            $outputBox.AppendText("Restarting $item" + [Environment]::NewLine)
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item OFFLINE" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      $statusText.text = "Restart Operation Complete"
      logAction "Operation has completed."
      $outputBox.AppendText("Restart Operation Complete" + [Environment]::NewLine)
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $wshell.Popup("Restart has finished running.", 0, "LEFT CLICK TOOLS")
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined)" + [Environment]::NewLine)
    }
  }
}


#################################################################################

#################################################################################



function SHUTDN {
  logAction "Shutdown started."
  $outputBox.AppendText("Shutdown Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Are you sure you want to Shutdown all pc's?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Restarting $item"
        $outputBox.AppendText("Restarting $item" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE
                       
            Stop-Computer -ComputerName $item -Force
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item OFFLINE" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      $statusText.text = "Shutdown Operation Complete"
      $outputBox.AppendText("Shutdown Operation Complete" + [Environment]::NewLine)
      logAction "Shutdown Attempt has completed."
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $wshell.Popup("Shutdown has finished running.", 0, "LEFT CLICK TOOLS")
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined)" + [Environment]::NewLine)
    }
  }
}



#################################################################################



# Activates the main function of the tool, targeting each item on the item list.
function ViewUser {
  logAction "Pop Up Prompt."
  $outputBox.AppendText("ViewUser Tool Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Get Logged on User Information?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Getting Logged on User for $item"
        $outputBox.AppendText("Getting Logged on User for $item" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE - Retrieving User Info"
            $outputBox.AppendText("$item ONLINE - Retrieving User Info" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE
                       
                        
            $UN = Get-WmiObject Win32_ComputerSystem -Computername $item
            "Logged On User: " + $UN.Username
            logAction $UN.Username
            $outputBox.AppendText("Logged on User:" + [Environment]::NewLine)
            $outputBox.AppendText($UN.Username + [Environment]::NewLine)
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE - Unable to get user info"

            $statusText.text = "Item Offline"
            $outputBox.AppendText("$Item Offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      $statusText.text = "Operation Complete"
      $outputBox.AppendText("Operation Complete" + [Environment]::NewLine)
      logAction "Operation has completed."
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined)" + [Environment]::NewLine)
    }
  }
}







#################################################################################




function SubFolder {
  logAction "Sub Folder Action Started."
  $outputBox.AppendText("Sub Folder Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("This will Create a Sub Folder on all PC's. Continue?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
      $outputBox.AppendText("Create Sub Folder Clicked." + [Environment]::NewLine)
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Creating Folder on $item"
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE
                       
            Invoke-Command -ComputerName $item -ScriptBlock {
              $TargetFile = "C:\Users\Public\Documents"
              $ShortcutFile = "C:\Users\Public\Desktop\SUB FOLDER.lnk"
              $WScriptShell = New-Object -ComObject WScript.Shell 
              $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
              $Shortcut.TargetPath = $TargetFile
              $Shortcut.Save() 
            }

                          
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to create folder"
            $outputBox.AppendText("$item Offline" + [Environment]::NewLine)
          $statusText.text = "Item Offline"}

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      $statusText.text = "Folder Creation Complete"
      logAction "Created Sub Folder."
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $wshell.Popup("Created Sub Folder.", 0, "LEFT CLICK TOOLS")
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}

##############################################################################


function MESSAGE {

  Add-Type -AssemblyName Microsoft.VisualBasic

  logAction "Message Action Started."
  $outputBox.AppendText("Message Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Message will appear for 2 Minutes. Click OK to continue.", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      $msg = [Microsoft.VisualBasic.Interaction]::InputBox("Enter your message", "Message Tool")

            
      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Sending Message to $item"
        $outputBox.AppendText("Sending Message to $item." + [Environment]::NewLine)
        $outputBox.AppendText("Message = $msg" + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE
                       
                                               
            Invoke-WmiMethod -Path Win32_Process -Name Create -ArgumentList "msg * $msg" -ComputerName $item 
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to Send Message"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      $statusText.text = "Message Sent"
      logAction "Message Send Attempted. Message = $msg"
      $outputBox.AppendText("Message Send Attempted." + [Environment]::NewLine)
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      #$wshell.Popup("Completed. Please check the log for message status.", 0, "LEFT CLICK TOOLS")
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined.)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}


####################################################################################


function LOGOFF {
  logAction "Log Off Action Started."
  $outputBox.AppendText("Log Off Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("This will log off all users. Continue?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        $statusText.text = "Attempting log Off on $item"
        $outputBox.AppendText("Attempting log Off on $item." + [Environment]::NewLine)
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("logAction $item ONLINE" + [Environment]::NewLine)


            #INSERT SCRIPT TO PERFORM HERE
                       
            Invoke-Command -computerName $item -ScriptBlock {
                      
                        
              (Get-WmiObject -Class Win32_OperatingSystem).Win32Shutdown(4) # Is a Flag
                        
            } 
                          
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to Log Off"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item Offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
      logAction "Attempted Logoff Complete."
      $outputBox.AppendText("Attempted Logoff Complete." + [Environment]::NewLine)
      Start-Sleep -Seconds 1
      $wshell.Popup("Attempted Logoff Complete", 0, "LEFT CLICK TOOLS")
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}


########################################################################################





#################################################################################


function STARTRDP {
  logAction "Starting RDP Session."
  $outputBox.AppendText("Starting RDP Session Tool." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Do you want to start an RDP Session with PC(s)?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE

                       
            Start-Process "$env:windir\system32\mstsc.exe" -ArgumentList "/v:$item"
                          
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to Start RDP session"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "RDP Session Attempted."
      $outputBox.AppendText("RDP Session(s) Attempted." + [Environment]::NewLine)
      # Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}


#################################################################################



function CONTROL {
  logAction "Starting Remote Control Session."
  $outputBox.AppendText("Starting Remote Control Tool." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Do you want to Remote Control PC(s)?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE

                       
            Start-Process "C:\Program Files (x86)\Microsoft Endpoint Manager\AdminConsole\bin\i386\CmRcViewer.exe" $item
                          
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to make connection"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item Offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "Remote Session Attempted."
      $outputBox.AppendText("Remote Session(s) Attempted." + [Environment]::NewLine)
      # Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined.)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}


#################################################################################



function GPOStatus {
  logAction "Starting GPO Status Check."
  $outputBox.AppendText("GPO Status Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Do you want to Check the GPO status of PC(s)? (This can take up to 2 minutes per machine.  File will open when complete.)", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      $statusText.text = "Getting GPO File"

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE)" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE
                      
                      


            $GPRESULTLocation = [Environment]::GetFolderPath("Desktop")
            Invoke-Command -ComputerName $item -ScriptBlock { gpresult /h C:\Gpresult.html } 
            Copy-Item "\\$item\C$\Gpresult.html" $GPRESULTLocation
            ii $GPRESULTLocation\Gpresult.html

                          
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to make connection"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item offline)" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message)" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "GPO Status Attempted."
      $outputBox.AppendText("GPO Status Attempted.)" + [Environment]::NewLine)
      # Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined.)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}


#################################################################################



function GPUPDATE {
  logAction "Starting GPUPDATE."
  $outputBox.AppendText("GPUPDATE Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Do you want to Run GPUPDATE on PC(s)?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE


            $computerName = $item


            #Write-Host "Running gpupdate /force on $computerName..."
            $outputBox.AppendText("Running gpupdate /force on $computerName..." + [Environment]::NewLine)
            Invoke-Command -ComputerName $computerName -ScriptBlock { gpupdate /force } | Out-File -Append $logLocation

                
                          
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to make connection"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "GPUPDATE Attempted."
      $outputBox.AppendText("GPUPDATE Attempt Completed." + [Environment]::NewLine)
      # [System.Windows.Forms.MessageBox]::Show($Message, "Group Policy Update completed on $computerName. Check $logLocation for details.")
      # Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined.)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}



#################################################################################


function OPENLOG {
  logAction "Opening Log."
  $outputBox.AppendText("Opening Log." + [Environment]::NewLine)
    
  #INSERT SCRIPT TO PERFORM HERE


  ii $logLocation

}

#################################################################################


function KMS {
  logAction "KMS Tool Started."
  $outputBox.AppendText("KMS Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Do you want to Run KMS check on PC(s)?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)
            $outputBox.AppendText("Checking $item KMS Status..." + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE

            $outputBox.AppendText("-------------------------------------------------------------------------------------------------" + [Environment]::NewLine)
    
            $slmgrOutput = & cscript.exe C:\Windows\System32\slmgr.vbs /dlv
            $outputBox.AppendText("$slmgrOutput" + [Environment]::NewLine)
            #Write-Output $slmgrOutput

    
    
    
            logAction "Attempted to access KMS Info."
            $outputBox.AppendText("-------------------------------------------------------------------------------------------------" + [Environment]::NewLine)
            $outputBox.AppendText("Attempted to access KMS Info." + [Environment]::NewLine)


            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to make connection"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "KMS Info Collection attempt."
      $outputBox.AppendText("KMS Info Collection attempt." + [Environment]::NewLine)
      # [System.Windows.Forms.MessageBox]::Show($Message, "Group Policy Update completed on $computerName. Check $logLocation for details.")
      # Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined.)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}

#################################################################################################################################################


function MACINFO {
  logAction "Starting Mac Info Tool."
  $outputBox.AppendText("Looking Up MAC Address Vendor Information..." + [Environment]::NewLine)
    
  #INSERT SCRIPT TO PERFORM HERE


  Add-Type -AssemblyName System.Windows.Forms

  $form = New-Object System.Windows.Forms.Form
  $form.Text = 'MAC'
  $form.Width = 350
  $form.Height = 200
  $form.StartPosition = 'CenterScreen'

  $label = New-Object System.Windows.Forms.Label
  $label.Location = New-Object System.Drawing.Point(10, 20)
  $label.Size = New-Object System.Drawing.Size(280, 20)
  $label.Text = 'Please enter a MAC address:'
  $form.Controls.Add($label)

  $textbox = New-Object System.Windows.Forms.TextBox
  $textbox.Location = New-Object System.Drawing.Point(10, 40)
  $textbox.Size = New-Object System.Drawing.Size(260, 20)
  $form.Controls.Add($textbox)

  $button = New-Object System.Windows.Forms.Button
  $button.Location = New-Object System.Drawing.Point(180, 80)
  $button.Size = New-Object System.Drawing.Size(90, 30)
  $button.Text = 'OK'
  $button.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $form.AcceptButton = $button
  $form.Controls.Add($button)

  $form.Topmost = $true

  $dialogResult = $form.ShowDialog()

  if ($dialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    $macAddress = $textbox.Text

    Add-Type -AssemblyName System.Net.Http
    $httpClient = New-Object System.Net.Http.HttpClient

    $url = "https://api.macvendors.com/$macAddress"

    try {
      $response = $httpClient.GetAsync($url).GetAwaiter().GetResult()
      $result = $response.Content.ReadAsStringAsync().GetAwaiter().GetResult()

      $outputBox.AppendText("MAC address information for $macAddress" + [Environment]::NewLine)
      outputBox.AppendText("$result" + [Environment]::NewLine)
      logAction "$result."
        
    }
    catch {
        
      $outputBox.AppendText("" + [Environment]::NewLine)
          
    }
  }

  
  $outputBox.AppendText("$result" + [Environment]::NewLine)
}




####################################################################################################################################################

function VULN {
  logAction "GATHERING VULNERABILITY INFO."
  $outputBox.AppendText("Started Security Check Tool..." + [Environment]::NewLine)
  $outputBox.AppendText("Please Wait..... This can take a while..." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Do you want to get Vulnerability info for PC(s)?  NOTE: This can take about 5 Minutes Per Machine.", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
      $statusText.text = "Scanning Computer(s)"
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)
            $outputBox.AppendText("Scanning $item..." + [Environment]::NewLine)

            $ErrorActionPreference = 'SilentlyContinue'

            #INSERT SCRIPT TO PERFORM HERE

 
            $computer = $item

            if (Test-Connection $computer -Quiet -Count 1 -TimeToLive 5) {
              $results = "Checking SMB...`n"
    

              if (Test-NetConnection $computer -Port 445 -InformationLevel Quiet) {
                $results += "SMB is open`n"
                LogAction $results
        
              } else {
                $results += "SMB is closed`n"
                LogAction $results
        
              }
    
              $results += "`nChecking SFTP...`n"
              if (Test-NetConnection $computer -Port 22 -InformationLevel Quiet) {
                $results += "SFTP is open`n"
                LogAction $results
        
              } else {
                $results += "SFTP is closed`n"
                LogAction $results
        
              }
    
              $results += "`nChecking Anonymous FTP...`n"
    
              if (Test-NetConnection $computer -Port 21 -InformationLevel Quiet) {
                $ftp = [Net.WebRequest]::Create("ftp://$computer/")
                $ftp.Credentials = New-Object Net.NetworkCredential("anonymous","guest")
                $ftp.Method = [Net.WebRequestMethods+Ftp]::ListDirectory
                try {
                  $response = $ftp.GetResponse()
                  $results += "Anonymous FTP is enabled`n"
            
                  $response.Close()

                } catch {
                  $results += "Anonymous FTP is not enabled`n"
                  LogAction $results
            
                }
              } else {
                $results += "FTP is closed`n"
                LogAction $results
        
              }
    
              $results += "`nChecking NetBIOS...`n"
              if (nbtstat -A $computer -T 5 -erroraction 'silentlycontinue') {
                $results += "NetBIOS is open`n"
                LogAction $results
        
              } else {
                $results += "NetBIOS is closed`n"
                LogAction $results
        
              }
    
              $results += "`nChecking LLMNR...`n"
              if (Test-NetConnection $computer -Port 5355 -InformationLevel Quiet) {
                $results += "LLMNR is open`n"
                LogAction $results
        
              } else {
                $results += "LLMNR is closed`n"
                LogAction $results
        
              }
    
              $results += "`nChecking PSEXEC...`n"
    
              if (Test-NetConnection $computer -Port 445 -InformationLevel Quiet) {
                $service = Get-WmiObject -Class Win32_Service -ComputerName $computer -Filter "Name='RpcSs'"
                if ($service.State -eq 'Running') {
                  $results += "PSEXEC is enabled`n"
                  LogAction $results
            
                } else {
                  $results += "PSEXEC is not enabled`n"
                  LogAction $results
           
                }
              } else {
                $results += "PSEXEC is closed`n"
                $outputBox.AppendText("$results" + [Environment]::NewLine)
                LogAction $results
        
              }
    
              [System.Windows.Forms.MessageBox]::Show($results, "Port Scanner Results", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
    
            } else {
              [System.Windows.Forms.MessageBox]::Show("Scan Attempted", "Port Scanner Results", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
            }




                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to Get Vulnerability Info"
          $statusText.text = "Item Offline"}
          $outputBox.AppendText("$item offline" + [Environment]::NewLine)

        }
        catch {
          logAction "$item | $_.Exception.Message"
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "Security Check Attempted."
      #Invoke-Item $logLocation
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined.)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}

#################################################################################


function PCINFO {
  logAction "GATHERING PC INFO."
  $outputBox.AppendText("GATHERING PC INFO.  Please Wait....." + [Environment]::NewLine)

  # Counters for progress bar calculation 
  $ctr = 0 
  foreach ($item in $itemList.items) {$ctr++}
  $x = 100 / $ctr 
  $y = 0 

  $msgBoxInput = $wshell.Popup("Do you want to get info for the selected PC?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      foreach ($item in $itemList.items) {
        if (test-connection -count 1 -ComputerName $item -quiet) {
          logAction "$item ONLINE"
          $statusText.text = "$item Online"

          #INSERT SCRIPT TO PERFORM HERE

          $ComputerSystem = Get-WmiObject -Class Win32_ComputerSystem -ComputerName $item
          $OperatingSystem = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $item
          $Bios = Get-WmiObject -Class Win32_BIOS -ComputerName $item
          $Battery = Get-WmiObject -Class Win32_Battery -ComputerName $item 
          $PhysicalMemory = Get-WmiObject -Class Win32_PhysicalMemory -ComputerName $item -ErrorAction SilentlyContinue
          $DiskDrive = Get-WmiObject -Class Win32_DiskDrive -ComputerName $item | Select-Object -First 1
          $Processor = Get-WmiObject -Class Win32_Processor -ComputerName $item
          $HardDriveType = $DiskDrive.MediaType
          $MacAddress = Get-NetAdapter -Physical | Where-Object {$_.InterfaceDescription -match 'Ethernet'} | Select-Object -ExpandProperty MacAddress
          $IPAddresses = (Get-WmiObject -Class Win32_NetworkAdapterConfiguration -ComputerName $item -Filter "IPEnabled='True'").IPAddress




          # Retrieve RAM information
          $MemoryPartNumber = $PhysicalMemory.PartNumber
          $MemoryCapacityGB = [Math]::Round(($PhysicalMemory.Capacity / 1GB), 2)

          # Retrieve hard drive information
          $HardDriveBrand = $DiskDrive.Manufacturer

          # Retrieve domain and OU information
          $adComputer = Get-ADComputer -Identity $item -Properties CanonicalName
          if ($adComputer) {
            $domain = ($adComputer.CanonicalName -split '/')[1]
            $ou = $adComputer.CanonicalName -replace "^$domain/",""
          }

          # Display computer information in same output box
          $Message = @"
Computer Name: $($ComputerSystem.Name)
Domain: $($domain)
OU: $($ou)
RAM: $($MemoryPartNumber), $($MemoryCapacityGB) GB 
Hard Drive: $($HardDriveBrand) $($HardDriveType), $([Math]::Round($DiskDrive.Size / 1GB, 2)) GB
Processor: $($Processor.Name)
IP Address: $($IPAddresses -join ', ')
MAC Address: $($MacAddress)
Serial Number: $($Bios.SerialNumber)
Battery Status: $($Battery.EstimatedChargeRemaining)%
------------------------------------------------------

Serial Number Automatically copies to your clipboard.

"@

          [System.Windows.Forms.Clipboard]::SetText($Bios.SerialNumber)

          logAction $Message
          #[System.Windows.Forms.MessageBox]::Show($Message, "Computer Information")
          $outputBox.AppendText("$Message" + [Environment]::NewLine)


                    


          #INSERT SCRIPT TO PERFORM HERE
        }
        else {
          logAction "$item OFFLINE, Unable to Get PC Info"
          $statusText.text = "Item Offline"
        }

        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
    }
    '0' {
      logAction "User aborted the operation. (Confirmation declined)"
    }
  }

  $ProgressBar.Value = 0
  

}

#################################################################################################################################################################


function LASTLogin {
  logAction "GATHERING last login INFO."
  $outputBox.AppendText("GATHERING last login INFO from AD.  Please Wait....." + [Environment]::NewLine)
  $outputBox.AppendText("Since this pulls from AD and not our Identity Service Engine this might display incorrect results." + [Environment]::NewLine)
  

  #INSERT SCRIPT TO PERFORM HERE

  Add-Type -AssemblyName System.Windows.Forms
  Add-Type -AssemblyName System.Drawing

  # Display input box to enter user name
  $user = [Microsoft.VisualBasic.Interaction]::InputBox("Please enter the users number")

  # Retrieve AD user information
  $ADUser = Get-ADUser -Identity $user -Properties LastLogon

  # Format and display output
  $Name = $ADUser.Name
  $LastLogon = [DateTime]::FromFileTime($ADUser.LastLogon)
                                        


  #INSERT SCRIPT TO PERFORM HERE
  $outputBox.AppendText("Name: $Name" + [Environment]::NewLine)
  $outputBox.AppendText("Last Logon: $LastLogon" + [Environment]::NewLine)
  logAction "Name: $Name Last Logon: $LastLogon."
}

########################################################################################################################
    
    
function LOCALAdmin {
  logAction "Starting Local Admin Tool."
  $outputBox.AppendText("Local Admin Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Do you want to Run a Local Admin Check on PC(s)? `n `n This ignores Default Admin Groups and only reports the users.", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE



            $Computer = $item
            $admins = [ADSI]"WinNT://$Computer/administrators,group"
            $adminlist = @($admins.psbase.Invoke("Members"))
            $adminnames = @()

            foreach ($admin in $adminlist) {
              $adminname = $admin.GetType().InvokeMember("Name", 'GetProperty', $null, $admin, $null)

################## In this section, put the local admin accounts you would like to ignore.

              if ($adminname -notlike "*IGNOREDADMIN*" -and $adminname -notlike "*IGNOREDADMIN*" -and $adminname -notlike "*IGNOREDADMIN*" -and $adminname -notlike "*IGNOREDADMIN*" -and $adminname -notlike "*IGNOREDADMIN*" -and $adminname -notlike "*IGNOREDADMIN*") { 
#############################################
                $adminnames += $adminname
              }
            }

            $output = "`r`n The following users are local administrators on: `r`n $Computer `r`n"
            foreach ($admin in $adminnames) {
              $output += "$admin FLAGGED - CHECK USER`r`n"
            }

            $outputBox.AppendText("$output" + [Environment]::NewLine)
            logAction "$output"

                  
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to make connection"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "Local Admin Check Attempt Completed."
      $outputBox.AppendText("Local Admin Check Attempt Completed." + [Environment]::NewLine)
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined.)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}


############################################################################################################

function ALLLOCALAdmin {
  logAction "Starting Local Admin Tool."
  $outputBox.AppendText("Local Admin Tool Started." + [Environment]::NewLine)
  $msgBoxInput = $wshell.Popup("Do you want to Run a Local Admin Check on PC(s)?", 0, "Confirm", 0x1)
  switch ($msgBoxInput) {
    '1' { 
      logAction "User confirmed process execution."
              
      # Counters for progress bar calculation 
      $ctr = 0 
      foreach ($item in $itemList.items) {$ctr++}
      $x = 100 / $ctr 
      $y = 0 

      # Loop to perform action on each item in the list.    
      foreach ($item in $itemList.items) {
        try {
          If (test-connection -count 1 -ComputerName $item -quiet) {
            logAction "$item ONLINE"
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            #INSERT SCRIPT TO PERFORM HERE



            $Computer = $item
            $admins = [ADSI]"WinNT://$Computer/administrators,group"
            $adminlist = @($admins.psbase.Invoke("Members"))
            $adminnames = @()

            foreach ($admin in $adminlist) {
              $adminname = $admin.GetType().InvokeMember("Name", 'GetProperty', $null, $admin, $null)
              if ($adminname -notlike "*EXCLUSIONS GO HERE*" -and $adminname -notlike "*EXCLUSIONS GO HERE*" -and $adminname -notlike "*EXCLUSIONS GO HERE*" -and $adminname -notlike "*EXCLUSIONS GO HERE*" -and $adminname -notlike "*EXCLUSIONS GO HERE*" -and $adminname -notlike "*EXCLUSIONS GO HERE*") { # Check if admin name does not contain "Cheese" or "fruit"
                $adminnames += $adminname
              }
            }

            $output = "`r`n The following users are local administrators on: `r`n $Computer `r`n"
            foreach ($admin in $adminnames) {
              $output += "$admin`r`n"
            }

            $outputBox.AppendText("$output" + [Environment]::NewLine)
            logAction "$output"

                  
                          
                       
            #INSERT SCRIPT TO PERFORM HERE

                        
                        
          }
          Else {logAction "$item OFFLINE, Unable to make connection"
            $statusText.text = "Item Offline"
            $outputBox.AppendText("$item offline" + [Environment]::NewLine)
          }

        }
        catch {
          logAction "$item | $_.Exception.Message"
          $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
        }
        $ProgressBar.Value = $y + $x
        $y = $y + $x
      }
   
      # Operation Completed finishing actions.
            
      logAction "Local Admin Check Attempt Completed."
      $outputBox.AppendText("Local Admin Check Attempt Completed." + [Environment]::NewLine)
      Start-Sleep -Seconds 1
      $statusText.text = ""
      $ProgressBar.Value = 0

    }
    '2' {
      logAction "User aborted the operation. (Confirmation declined.)"
      $outputBox.AppendText("User aborted the operation. (Confirmation declined.)" + [Environment]::NewLine)
    }
  }
}

#############################################################################################################



function TINYURL {
  Add-Type -AssemblyName System.Windows.Forms

  $form = New-Object System.Windows.Forms.Form
  $form.Text = 'Enter Shortened URL'
  $form.Width = 400
  $form.Height = 200
  $form.StartPosition = 'CenterScreen'

  $label = New-Object System.Windows.Forms.Label
  $label.Location = New-Object System.Drawing.Point(10, 20)
  $label.Size = New-Object System.Drawing.Size(280, 20)
  $label.Text = 'Enter a shortened URL:'
  $form.Controls.Add($label)

  $textbox = New-Object System.Windows.Forms.TextBox
  $textbox.Location = New-Object System.Drawing.Point(10, 40)
  $textbox.Size = New-Object System.Drawing.Size(360, 20)
  $form.Controls.Add($textbox)

  $button = New-Object System.Windows.Forms.Button
  $button.Location = New-Object System.Drawing.Point(280, 80)
  $button.Size = New-Object System.Drawing.Size(90, 30)
  $button.Text = 'OK'
  $button.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $form.AcceptButton = $button
  $form.Controls.Add($button)

  $form.Topmost = $true

  $dialogResult = $form.ShowDialog()

  if ($dialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
    $url = $textbox.Text

    try {
      $response = Invoke-WebRequest -MaximumRedirection 0 -Uri $url
      $location = $response.Headers.Location
      $statusCode = $response.StatusCode
      $vendor = $response.Headers.'X-Powered-By'

      $outputBox.AppendText("Result for $url" + [Environment]::NewLine)
      $outputBox.AppendText("Location: $location" + [Environment]::NewLine)
      $outputBox.AppendText("Status code: $statusCode" + [Environment]::NewLine)
      $outputBox.AppendText("Vendor: $vendor" + [Environment]::NewLine)
    }
    catch {
      $outputBox.AppendText("Error fetching $url." + [Environment]::NewLine)
    }
  }
}










#############################################################################################################

#############################################################################################################




#######      END OF BUTTON FUNCTIONS       #######
##################################################


###################VERSION BUTTON######################
function VER {
  logAction "CURRENT VERSION BUTTON PRESSED - Program Created by ©Josh Hochstettler."
  $msgBoxInput = $wshell.Popup("Left Click Tools© - Created by Josh Hochstettler", 0, "Confirm", 0)
}
#######################################################


################## GUI Form BUTTONS ##################



$itemList = New-Object system.Windows.Forms.ListBox
$itemList.width = 380
$itemList.height = 190
$itemList.location = New-Object System.Drawing.Point(10, 10)
$itemlist.Font = 'Microsoft Sans Serif,20'
$Form.Controls.Add($itemList)

$buttonAdd = New-Object system.Windows.Forms.Button
$buttonAdd.Text = "Add.."
$buttonAdd.Forecolor = "black"
$buttonAdd.Backcolor = "lightgreen"     
$buttonAdd.width = 75
$buttonAdd.height = 24
$buttonAdd.location = New-Object System.Drawing.Point(10, 200)
$buttonAdd.Font = 'Microsoft Sans Serif,10'
$buttonAdd.Add_Click( { addList })
$Form.Controls.Add($buttonAdd)

$buttonRemove = New-Object system.Windows.Forms.Button
$buttonRemove.Text = "Remove" 
$buttonRemove.Forecolor = "black"
$buttonRemove.Backcolor = "tomato"    
$buttonRemove.width = 95
$buttonRemove.height = 24
$buttonRemove.location = New-Object System.Drawing.Point(85, 200)
$buttonRemove.Font = 'Microsoft Sans Serif,10'
$buttonRemove.Add_Click( { removeList })
$Form.Controls.Add($buttonRemove)

$buttonClear = New-Object system.Windows.Forms.Button
$buttonClear.Text = "Clear All"     
$buttonClear.width = 110
$buttonClear.height = 24
$buttonClear.ForeColor = "black"    
$buttonClear.BackColor = "tomato"
$buttonClear.location = New-Object System.Drawing.Point(180, 200)
$buttonClear.Font = 'Microsoft Sans Serif,10'
$buttonClear.Add_Click( { clearList })
$Form.Controls.Add($buttonClear)

$buttonImport = New-Object system.Windows.Forms.Button
$buttonImport.Text = "Import List" 
$buttonImport.ForeColor = "black"    
$buttonImport.BackColor = "lightgreen" 
$buttonImport.width = 107
$buttonImport.height = 24
$buttonImport.location = New-Object System.Drawing.Point(290, 200)
$buttonImport.Font = 'Microsoft Sans Serif,10'
$buttonImport.Add_Click( { importList })
$Form.Controls.Add($buttonImport)

##For progress bar, do not edit.##
$statusText = New-Object system.Windows.Forms.Label
$statusText.text = ""
$statusText.AutoSize = $true
$statusText.width = 25
$statusText.height = 10
$statusText.ForeColor = "Red"
$statusText.location = New-Object System.Drawing.Point(50, 250)
$statusText.Font = 'Microsoft Sans Serif,10'
$Form.Controls.Add($statusText)
#######       END OF PROGRESS BAR FUNCTION       #######
########################################################

$ClientRepair = New-Object system.Windows.Forms.Button
$ClientRepair.Text = "SCCM Client Repair" 
$ClientRepair.ForeColor = "white"    
$ClientRepair.BackColor = "black"    
$ClientRepair.width = 145
$ClientRepair.height = 24
$ClientRepair.location = New-Object System.Drawing.Point(10, 270)
$ClientRepair.Font = 'Microsoft Sans Serif,10'
$ClientRepair.Add_Click( { Repair })
$Form.Controls.Add($ClientRepair)

$SmsStop = New-Object system.Windows.Forms.Button
$SmsStop.Text = "Stop SMS Serv."     
$SmsStop.ForeColor = "white"
$SmsStop.BackColor = "black"
$SmsStop.width = 110
$SmsStop.height = 24
$SmsStop.location = New-Object System.Drawing.Point(160, 270)
$SmsStop.Font = 'Microsoft Sans Serif,10'
$SmsStop.Add_Click( { SmsStop })
$Form.Controls.Add($SmsStop)

$RestartComp = New-Object system.Windows.Forms.Button
$RestartComp.Text = "Restart PC(s)" 
$RestartComp.ForeColor = "black"
$RestartComp.backColor = "orange"   
$RestartComp.width = 140
$RestartComp.height = 24
$RestartComp.location = New-Object System.Drawing.Point(95, 370)
$RestartComp.Font = 'Microsoft Sans Serif,9'
$RestartComp.Add_Click( { Restart })
$Form.Controls.Add($RestartComp)

$LOGOFF = New-Object system.Windows.Forms.Button
$LOGOFF.Text = "LogOff PC"  
$LOGOFF.ForeColor = "black"
$LOGOFF.BackColor = "yellow"   
$LOGOFF.width = 85
$LOGOFF.height = 24
$LOGOFF.location = New-Object System.Drawing.Point(240, 370)
$LOGOFF.Font = 'Microsoft Sans Serif,9'
$LOGOFF.Add_Click( { LOGOFF })
$FORM.Controls.Add($LOGOFF)

$SHUTDN = New-Object system.Windows.Forms.Button
$SHUTDN.Text = "Shutdown PC"  
$SHUTDN.ForeColor = "white"   
$SHUTDN.BackColor = "purple"   
$SHUTDN.width = 100
$SHUTDN.height = 24
$SHUTDN.location = New-Object System.Drawing.Point(330, 370)
$SHUTDN.Font = 'Microsoft Sans Serif,9'
$SHUTDN.Add_Click( { SHUTDN })
$FORM.Controls.Add($SHUTDN)

$ViewUser = New-Object system.Windows.Forms.Button
$ViewUser.Text = "View User"     
$ViewUser.ForeColor = "white"
$ViewUser.BackColor = "black"
$ViewUser.width = 110
$ViewUser.height = 24
$ViewUser.location = New-Object System.Drawing.Point(160, 300)
$ViewUser.Font = 'Microsoft Sans Serif,10'
$ViewUser.Add_Click( { ViewUser })
$Form.Controls.Add($ViewUser)

$RemoteC = New-Object system.Windows.Forms.Button
$RemoteC.Text = "Remote C:" 
$RemoteC.ForeColor = "white"   
$RemoteC.BackColor = "black" 
$RemoteC.width = 110
$RemoteC.height = 24
$RemoteC.location = New-Object System.Drawing.Point(275,330)
$RemoteC.Font = 'Microsoft Sans Serif,10'
$RemoteC.Add_Click( { RemoteC })
$Form.Controls.Add($RemoteC)

$RemoteU = New-Object system.Windows.Forms.Button
$RemoteU.Text = "Remote U:"  
$RemoteU.ForeColor = "white"
$RemoteU.BackColor = "black"   
$RemoteU.width = 110
$RemoteU.height = 24
$RemoteU.location = New-Object System.Drawing.Point(390, 330) #Left Right, Up Down 
$RemoteU.Font = 'Microsoft Sans Serif,10'
$RemoteU.Add_Click( { RemoteU })
$Form.Controls.Add($RemoteU)

$ProgressBar = New-Object system.Windows.Forms.ProgressBar
$ProgressBar.width = 535
$ProgressBar.height = 17
$ProgressBar.location = New-Object System.Drawing.Point(10, 230)
$Form.Controls.Add($ProgressBar)


$pingTool = New-Object system.Windows.Forms.Button
$pingTool.Text = "PING SYSTEM(S)" 
$pingTool.ForeColor = "white"
$pingTool.BackColor = "black"     
$pingTool.width = 145
$pingTool.height = 24
$pingTool.location = New-Object System.Drawing.Point(10, 300)
$pingTool.Font = 'Microsoft Sans Serif,9'
$pingTool.Add_Click( { pingTool })
$Form.Controls.Add($pingTool)

$SubFolder = New-Object system.Windows.Forms.Button
$SubFolder.Text = "Add Sub Folder"
$SubFolder.ForeColor = "white"    
$SubFolder.BackColor = "black"    
$SubFolder.width = 145
$SubFolder.height = 24
$SubFolder.location = New-Object System.Drawing.Point(10, 330)
$SubFolder.Font = 'Microsoft Sans Serif,9'
$SubFolder.Add_Click( { SubFolder })
$Form.Controls.Add($SubFolder)

$MESSAGE = New-Object system.Windows.Forms.Button
$MESSAGE.Text = "Message"  
$MESSAGE.ForeColor = "white"   
$MESSAGE.BackColor = "black"
$MESSAGE.width = 110
$MESSAGE.height = 24
$MESSAGE.location = New-Object System.Drawing.Point(160, 330)
$MESSAGE.Font = 'Microsoft Sans Serif,10'
$MESSAGE.Add_Click( { MESSAGE })
$Form.Controls.Add($MESSAGE)


$PUBLICDSK = New-Object system.Windows.Forms.Button
$PUBLICDSK.Text = "Public Desktop"  
$PUBLICDSK.ForeColor = "white"  
$PUBLICDSK.BackColor = "black"
$PUBLICDSK.width = 110
$PUBLICDSK.height = 24
$PUBLICDSK.location = New-Object System.Drawing.Point(275, 300)
$PUBLICDSK.Font = 'Microsoft Sans Serif,10'
$PUBLICDSK.Add_Click( { PUBLICDSK })
$Form.Controls.Add($PUBLICDSK)

$VULN = New-Object system.Windows.Forms.Button
$VULN.Text = "Security Check"  
$VULN.ForeColor = "black"   
$VULN.BackColor = "teal"
$VULN.width = 110
$VULN.height = 24
$VULN.location = New-Object System.Drawing.Point(275, 270)
$VULN.Font = 'Microsoft Sans Serif,10'
$VULN.Add_Click( { VULN })
$Form.Controls.Add($VULN)


$HASH = New-Object system.Windows.Forms.Button
$HASH.Text = "Hash Checker"  
$HASH.ForeColor = "black"   
$HASH.BackColor = "teal"
$HASH.width = 110
$HASH.height = 24
$HASH.location = New-Object System.Drawing.Point(390, 270) #horizontal, vertical
$HASH.Font = 'Microsoft Sans Serif,10'
$HASH.Add_Click( { HASH })
$Form.Controls.Add($HASH)

$GPUPDATE = New-Object system.Windows.Forms.Button
$GPUPDATE.Text = "GPUpdate"  
$GPUPDATE.ForeColor = "white"   
$GPUPDATE.BackColor = "black"
$GPUPDATE.width = 110
$GPUPDATE.height = 24
$GPUPDATE.location = New-Object System.Drawing.Point(390, 300) #horizontal, vertical
$GPUPDATE.Font = 'Microsoft Sans Serif,10'
$GPUPDATE.Add_Click( { GPUPDATE })
$Form.Controls.Add($GPUPDATE)

$PCINFO = New-Object system.Windows.Forms.Button
$PCINFO.Text = "PC INFO"  
$PCINFO.ForeColor = "white"   
$PCINFO.BackColor = "black"
$PCINFO.width = 110
$PCINFO.height = 24
$PCINFO.location = New-Object System.Drawing.Point(10, 430) #horizontal, vertical
$PCINFO.Font = 'Microsoft Sans Serif,10'
$PCINFO.Add_Click( { PCINFO })
$Form.Controls.Add($PCINFO)

$KMS = New-Object system.Windows.Forms.Button
$KMS.Text = "KMS INFO"  
$KMS.ForeColor = "lightblue"   
$KMS.BackColor = "black"
$KMS.width = 110
$KMS.height = 24
$KMS.location = New-Object System.Drawing.Point(10, 460) #horizontal, vertical
$KMS.Font = 'Microsoft Sans Serif,10'
$KMS.Add_Click( { KMS })
$Form.Controls.Add($KMS)


$MACINFO = New-Object system.Windows.Forms.Button
$MACINFO.Text = "MAC Vendor"  
$MACINFO.ForeColor = "black"   
$MACINFO.BackColor = "lightblue"
$MACINFO.width = 110
$MACINFO.height = 24
$MACINFO.location = New-Object System.Drawing.Point(10, 490) #horizontal, vertical
$MACINFO.Font = 'Microsoft Sans Serif,10'
$MACINFO.Add_Click( { MACINFO })
$Form.Controls.Add($MACINFO)

$TINYURL = New-Object system.Windows.Forms.Button
$TINYURL.Text = "URL Checker"  
$TINYURL.ForeColor = "black"   
$TINYURL.BackColor = "lightblue"
$TINYURL.width = 110
$TINYURL.height = 24
$TINYURL.location = New-Object System.Drawing.Point(10, 520) #horizontal, vertical
$TINYURL.Font = 'Microsoft Sans Serif,10'
$TINYURL.Add_Click( { TINYURL })
$Form.Controls.Add($TINYURL)

$GPOStatus = New-Object system.Windows.Forms.Button
$GPOStatus.Text = "GPO Status"  
$GPOStatus.ForeColor = "white"   
$GPOStatus.BackColor = "black"
$GPOStatus.width = 110
$GPOStatus.height = 24
$GPOStatus.location = New-Object System.Drawing.Point(125, 430) #horizontal, vertical
$GPOStatus.Font = 'Microsoft Sans Serif,10'
$GPOStatus.Add_Click( { GPOStatus })
$Form.Controls.Add($GPOStatus)

$LASTLogin = New-Object system.Windows.Forms.Button
$LASTLogin.Text = "Last User Login"  
$LASTLogin.ForeColor = "white"   
$LASTLogin.BackColor = "black"
$LASTLogin.width = 110
$LASTLogin.height = 24
$LASTLogin.location = New-Object System.Drawing.Point(240, 430) #horizontal, vertical
$LASTLogin.Font = 'Microsoft Sans Serif,10'
$LASTLogin.Add_Click( { LASTLogin })
$Form.Controls.Add($LASTLogin)

$LOCALAdmin = New-Object system.Windows.Forms.Button
$LOCALAdmin.Text = "Local Admin"  
$LOCALAdmin.ForeColor = "white"   
$LOCALAdmin.BackColor = "black"
$LOCALAdmin.width = 90
$LOCALAdmin.height = 24
$LOCALAdmin.location = New-Object System.Drawing.Point(355, 430) #horizontal, vertical
$LOCALAdmin.Font = 'Microsoft Sans Serif,10'
$LOCALAdmin.Add_Click( { LOCALAdmin })
$Form.Controls.Add($LOCALAdmin)

$ALLLOCALAdmin = New-Object system.Windows.Forms.Button
$ALLLOCALAdmin.Text = "ALL Local Admin"  
$ALLLOCALAdmin.ForeColor = "white"   
$ALLLOCALAdmin.BackColor = "black"
$ALLLOCALAdmin.width = 120
$ALLLOCALAdmin.height = 24
$ALLLOCALAdmin.location = New-Object System.Drawing.Point(450, 430) #horizontal, vertical
$ALLLOCALAdmin.Font = 'Microsoft Sans Serif,10'
$ALLLOCALAdmin.Add_Click( { ALLLOCALAdmin })
$Form.Controls.Add($ALLLOCALAdmin)

$PRINTCLR = New-Object system.Windows.Forms.Button
$PRINTCLR.Text = "PRINT SPOOL CLR"  
$PRINTCLR.ForeColor = "white"   
$PRINTCLR.BackColor = "olive"
$PRINTCLR.width = 110
$PRINTCLR.height = 24
$PRINTCLR.location = New-Object System.Drawing.Point(125, 460) #horizontal, vertical
$PRINTCLR.Font = 'Microsoft Sans Serif,7'
$PRINTCLR.Add_Click( { PRINTCLR })
$Form.Controls.Add($PRINTCLR)



######################################################################################

$STARTRDP = New-Object system.Windows.Forms.Button
$STARTRDP.Text = "START RDP SESSION"  
$STARTRDP.Forecolor = "white"
$STARTRDP.Backcolor = "darkblue"   
$STARTRDP.width = 115
$STARTRDP.height = 80
$STARTRDP.location = New-Object System.Drawing.Point(415, 10)
$STARTRDP.Font = 'Microsoft Sans Serif,10'
$STARTRDP.Add_Click( { STARTRDP })
$Form.Controls.Add($STARTRDP)

$CONTROL = New-Object system.Windows.Forms.Button
$CONTROL.Text = "START Remote Control (MCEM)"  
$CONTROL.Forecolor = "white"
$CONTROL.Backcolor = "darkblue"   
$CONTROL.width = 115
$CONTROL.height = 80
$CONTROL.location = New-Object System.Drawing.Point(415, 100)
$CONTROL.Font = 'Microsoft Sans Serif,10'
$CONTROL.Add_Click( { CONTROL })
$Form.Controls.Add($CONTROL)


$OPENLOG = New-Object system.Windows.Forms.Button
$OPENLOG.Text = "OPEN LOG"  
$OPENLOG.ForeColor = "powderblue"
$OPENLOG.Backcolor = "black"   
$OPENLOG.width = 100
$OPENLOG.height = 24     
$OPENLOG.location = New-Object System.Drawing.Point(670, 460)
$OPENLOG.Font = 'Microsoft Sans Serif,9'
$OPENLOG.Add_Click( { OPENLOG })
$Form.Controls.Add($OPENLOG)




#####################################################################
#Left Side Form Title Label
#####################################################################
$formLabel = New-Object System.Windows.Forms.label
$formLabel.Location = New-Object System.Drawing.Point(280,465)
$formLabel.Size = New-Object System.Drawing.Size(180,30)
$formLabel.Font = New-Object System.Drawing.Font("arial","19",[System.Drawing.FontStyle]::Regular)
$formLabel.ForeColor = "white"
$formLabel.BackColor = "darkblue"
$formLabel.Text = "Remote Tools"
$form.Controls.Add($formLabel)
#####################################################################




##Version Number Form Space
$VER = New-Object system.Windows.Forms.Button
$VER.Text = "v6.11"  
$VER.ForeColor = "black"
$VER.Backcolor = "whitesmoke"   
$VER.width = 65
$VER.height = 24
#Horizontal, Vertical
$VER.location = New-Object System.Drawing.Point(590, 460)
$VER.Font = 'Microsoft Sans Serif,9'
$VER.Add_Click( { VER })
$Form.Controls.Add($VER)




#######################################################################################################################################################################################################
#                                             Right Side Application                                                                                                                                  #
#######################################################################################################################################################################################################

#####################################################################
#Right Side Form Title Label
#####################################################################
$formLabel = New-Object System.Windows.Forms.label
$formLabel.Location = New-Object System.Drawing.Point(950,50)
$formLabel.Size = New-Object System.Drawing.Size(255,30)
$formLabel.Font = New-Object System.Drawing.Font("arial","19",[System.Drawing.FontStyle]::Regular)
$formLabel.ForeColor = "white"
$formLabel.BackColor = "darkblue"
$formLabel.Text = "Local Machine Fixes"
$form.Controls.Add($formLabel)

#Right Side Bottom Form Label 
$formLabel = New-Object System.Windows.Forms.label
$formLabel.Location = New-Object System.Drawing.Point(950,390)
$formLabel.Size = New-Object System.Drawing.Size(300,30)
$formLabel.Font = New-Object System.Drawing.Font("arial","19",[System.Drawing.FontStyle]::Regular)
$formLabel.ForeColor = "white"
$formLabel.BackColor = "darkblue"
$formLabel.Text = "Blank Label"
#$form.Controls.Add($formLabel)
#####################################################################



# Create a "DISM Repair" button
$DISM = New-Object System.Windows.Forms.Button
$DISM.Location = New-Object System.Drawing.Point(940, 110)
$DISM.Forecolor = "black"
$DISM.Backcolor = "lightblue"
$DISM.Size = New-Object System.Drawing.Size(150, 30)
$DISM.Text = "1. DISM Repair"
$form.Controls.Add($DISM)



# Create a "Run SFC" button
$sfcButton = New-Object System.Windows.Forms.Button
$sfcButton.Location = New-Object System.Drawing.Point(1110, 110)
$sfcButton.Forecolor = "black"
$sfcButton.Backcolor = "lightblue"
$sfcButton.Size = New-Object System.Drawing.Size(100, 30)
$sfcButton.Text = "2. Run SFC"
$form.Controls.Add($sfcButton)

# Create an "Hiberboot - Reboot after shutdown fix" button
$hiberbootDisable = New-Object System.Windows.Forms.Button
$hiberbootDisable.Location = New-Object System.Drawing.Point(940, 150)
$hiberbootDisable.Forecolor = "black"
$hiberbootDisable.Backcolor = "lightgreen"
$hiberbootDisable.Size = New-Object System.Drawing.Size(150, 30)
$hiberbootDisable.Text = "Hiberboot Disable"
$form.Controls.Add($hiberbootDisable)


# Hiberboot Enable "Reboot after shutdown fix" button
$hiberbootEnable = New-Object System.Windows.Forms.Button
$hiberbootEnable.Location = New-Object System.Drawing.Point(1110, 150)
$hiberbootEnable.Size = New-Object System.Drawing.Size(100, 30)
$hiberbootEnable.Forecolor = "white"
$hiberbootEnable.Backcolor = "firebrick"
$hiberbootEnable.Text = "Hiberboot Enable"
$form.Controls.Add($hiberbootEnable)


# Create "Disable Auto Start Teams" button
$disableWSUS = New-Object System.Windows.Forms.Button
$disableWSUS.Location = New-Object System.Drawing.Point(940, 190)
$disableWSUS.Size = New-Object System.Drawing.Size(150, 30)
$disableWSUS.Forecolor = "black"
$disableWSUS.Backcolor = "lightgreen"
$disableWSUS.Text = "Disable WSUS"
$form.Controls.Add($disableWSUS)


# Create "Disable Auto Start Teams" button
$enableWSUS = New-Object System.Windows.Forms.Button
$enableWSUS.Location = New-Object System.Drawing.Point(1110, 190)
$enableWSUS.Size = New-Object System.Drawing.Size(100, 30)
$enableWSUS.Forecolor = "white"
$enableWSUS.Backcolor = "firebrick"
$enableWSUS.Text = "Enable WSUS"
$form.Controls.Add($enableWSUS)

# Create "Disable Search highlights" button
$disableHighlights = New-Object System.Windows.Forms.Button
$disableHighlights.Location = New-Object System.Drawing.Point(940, 230)
$disableHighlights.Size = New-Object System.Drawing.Size(150, 30)
$disableHighlights.Forecolor = "black"
$disableHighlights.Backcolor = "lightgreen"
$disableHighlights.Text = "Disable Search Highlights"
$form.Controls.Add($disableHighlights)


# Create "Enable Search Highlights" button
$enableHighlights = New-Object System.Windows.Forms.Button
$enableHighlights.Location = New-Object System.Drawing.Point(1110, 230)
$enableHighlights.Size = New-Object System.Drawing.Size(100, 30)
$enableHighlights.Forecolor = "white"
$enableHighlights.Backcolor = "firebrick"
$enableHighlights.Text = "Enable Highlights"
$form.Controls.Add($enableHighlights)

# Create "Allow upgrades with unsupported CPU TPM" button
$AllowUpgrades = New-Object System.Windows.Forms.Button
$AllowUpgrades.Location = New-Object System.Drawing.Point(940, 270)
$AllowUpgrades.Size = New-Object System.Drawing.Size(150, 30)
$AllowUpgrades.Forecolor = "black"
$AllowUpgrades.Backcolor = "lightgreen"
$AllowUpgrades.Font = New-Object System.Drawing.Font("","7",[System.Drawing.FontStyle]::Regular)
$AllowUpgrades.Text = "AllowUpgrades W/o CPU/TPM"
$form.Controls.Add($AllowUpgrades)


# Create "DisallowUpgrades" button
$DisallowUpgrades = New-Object System.Windows.Forms.Button
$DisallowUpgrades.Location = New-Object System.Drawing.Point(1110, 270)
$DisallowUpgrades.Size = New-Object System.Drawing.Size(100, 30)
$DisallowUpgrades.Forecolor = "white"
$DisallowUpgrades.Backcolor = "firebrick"
$DisallowUpgrades.Font = New-Object System.Drawing.Font("","7",[System.Drawing.FontStyle]::Regular)
$DisallowUpgrades.Text = "DisallowUpgrades"
$form.Controls.Add($DisallowUpgrades)

# Create "DisableBing" button
$DisableBing = New-Object System.Windows.Forms.Button
$DisableBing.Location = New-Object System.Drawing.Point(940, 310)
$DisableBing.Size = New-Object System.Drawing.Size(150, 30)
$DisableBing.Forecolor = "black"
$DisableBing.Backcolor = "lightgreen"
$DisableBing.Text = "Disable Bing"
$form.Controls.Add($DisableBing)


# Create "EnableBing" button
$EnableBing = New-Object System.Windows.Forms.Button
$EnableBing.Location = New-Object System.Drawing.Point(1110, 310)
$EnableBing.Size = New-Object System.Drawing.Size(100, 30)
$EnableBing.Forecolor = "white"
$EnableBing.Backcolor = "firebrick"
$EnableBing.Text = "Enable Bing"
$form.Controls.Add($EnableBing)

# Create "Local PCINFO" button
$LPCINFO = New-Object System.Windows.Forms.Button
$LPCINFO.Location = New-Object System.Drawing.Point(1110, 350)
$LPCINFO.Size = New-Object System.Drawing.Size(100, 30)
$LPCINFO.Forecolor = "lightgreen"
$LPCINFO.Backcolor = "black"
$LPCINFO.Text = "Local PC Info"
$form.Controls.Add($LPCINFO)


# Create "WIFI Accounts" button
$WIFIACCOUNT = New-Object System.Windows.Forms.Button
$WIFIACCOUNT.Location = New-Object System.Drawing.Point(1110, 390)
$WIFIACCOUNT.Size = New-Object System.Drawing.Size(100, 30)
$WIFIACCOUNT.Forecolor = "lightgreen"
$WIFIACCOUNT.Backcolor = "black"
$WIFIACCOUNT.Text = "WIFI Account(s)"
$form.Controls.Add($WIFIACCOUNT)

# Create "HDD Speed" button
$HDDSPEED = New-Object System.Windows.Forms.Button
$HDDSPEED.Location = New-Object System.Drawing.Point(940, 350)
$HDDSPEED.Size = New-Object System.Drawing.Size(150, 30)
$HDDSPEED.Forecolor = "lightgreen"
$HDDSPEED.Backcolor = "black"
$HDDSPEED.Text = "HDD Speed Test"
$form.Controls.Add($HDDSPEED)

# Create "WindowsUpdate" button
$WindowsUpdate = New-Object System.Windows.Forms.Button
$WindowsUpdate.Location = New-Object System.Drawing.Point(1110, 450)
$WindowsUpdate.Size = New-Object System.Drawing.Size(150, 30)
$WindowsUpdate.Forecolor = "white"
$WindowsUpdate.Backcolor = "mediumblue"
$WindowsUpdate.Text = "Open Windows Update"
$form.Controls.Add($WindowsUpdate)


# Create "Get Serial Number" button
$SerialNumber = New-Object System.Windows.Forms.Button
$SerialNumber.Location = New-Object System.Drawing.Point(940, 450)
$SerialNumber.Size = New-Object System.Drawing.Size(150, 30)
$SerialNumber.Forecolor = "white"
$SerialNumber.Backcolor = "mediumblue"
$SerialNumber.Text = "Get Serial Number"
$form.Controls.Add($SerialNumber)




# Define the actions for the buttons

$DISM.Add_Click({
    $outputBox.AppendText("DISM Checks your OS for Errors." + [Environment]::NewLine)
    $outputBox.AppendText("Running Windows Image Repair..." + [Environment]::NewLine)
    Start-Process cmd.exe -Verb RunAs -ArgumentList "/k DISM /Online /Cleanup-Image /RestoreHealth"

})



$sfcButton.Add_Click({

    $outputBox.AppendText("Running SFC /Scannow..." + [Environment]::NewLine)
    Start-Process cmd.exe -Verb RunAs -ArgumentList "/k sfc /scannow"
 
})


$hiberbootDisable.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Power" -Name "HiberbootEnabled" -Value 0 -Type DWord | Out-Null
    $outputBox.AppendText("HiberbootEnabled Registry key updated to 0." + [Environment]::NewLine)
    $outputBox.AppendText("This solves some problems with computers not wanting to wake up after updating to Windows 11." + [Environment]::NewLine)
})


$hiberbootEnable.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Power" -Name "HiberbootEnabled" -Value 1 -Type DWord | Out-Null
    $outputBox.AppendText("HiberbootEnabled Registry key updated to 1." + [Environment]::NewLine)
})


$disableWSUS.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "UseWUServer" -Value 0 -Type DWord | Out-Null
    Set-ItemProperty -Path "HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Value 1 -Type DWord | Out-Null
    $outputBox.AppendText("UseWUServer Registry key updated to 0." + [Environment]::NewLine)
    $outputBox.AppendText("NoAutoUpdate Registry key updated to 1." + [Environment]::NewLine)
    $outputBox.AppendText("You may run windows updates until the next GPO Update. (15 Minutes.)" + [Environment]::NewLine)
})



$enableWSUS.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "UseWUServer" -Value 1 -Type DWord | Out-Null
    Set-ItemProperty -Path "HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Value 0 -Type DWord | Out-Null
    $outputBox.AppendText("UseWUServer Registry key updated to 1." + [Environment]::NewLine)
    $outputBox.AppendText("NoAutoUpdate Registry key updated to 0." + [Environment]::NewLine)
    $outputBox.AppendText("Enabled WSUS Updates Only." + [Environment]::NewLine)
})



$disableHighlights.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search" -Name "EnableDynamicContentInWSB" -Value 0 -Type DWord | Out-Null
    $outputBox.AppendText("Search Highlight EnableDynamicContentInWSB Registry key updated to 0." + [Environment]::NewLine)
})


$enableHighlights.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search" -Name "EnableDynamicContentInWSB" -Value 1 -Type DWord | Out-Null
    $outputBox.AppendText("Search Highlight EnableDynamicContentInWSB Registry key updated to 1." + [Environment]::NewLine)
})

$AllowUpgrades.Add_Click({
    $outputBox.AppendText("Changing to allow Windows 11 Upgrade without checking for TPM/CPU..." + [Environment]::NewLine)
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    #Set-ItemProperty -Path "HKLM:\SYSTEM\Setup\MoSetup" -Name "AllowUpgradesWithUnsupportedTPMOrCPU" -Value 1 -Type DWord | Out-Null
    $outputBox.AppendText("AllowUpgradesWithUnsupportedTPMOrCPU Registry key updated to 1." + [Environment]::NewLine)
})


$DisallowUpgrades.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKLM:\SYSTEM\Setup\MoSetup" -Name "AllowUpgradesWithUnsupportedTPMOrCPU" -Value 0 -Type DWord | Out-Null
    $outputBox.AppendText("AllowUpgradesWithUnsupportedTPMOrCPU Registry key updated to 0." + [Environment]::NewLine)
})


$DisableBing.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKCU:\Software\Policies\Microsoft\Windows" -Name "DisableSearchBoxSuggestions" -Value 1 -Type DWord | Out-Null
    $outputBox.AppendText("DisableSearchBoxSuggestions Registry key updated to 1." + [Environment]::NewLine)
    $outputBox.AppendText("Since this is in the HKCU class, it only works per user and is not global." + [Environment]::NewLine)
})

$EnableBing.Add_Click({
    $outputBox.AppendText("Updating registry key..." + [Environment]::NewLine)
    Set-ItemProperty -Path "HKCU:\Software\Policies\Microsoft\Windows" -Name "DisableSearchBoxSuggestions" -Value 0 -Type DWord | Out-Null
    $outputBox.AppendText("DisableSearchBoxSuggestions Registry key updated to 0." + [Environment]::NewLine)
    $outputBox.AppendText("Since this is in the HKCU class, it only works per user and is not global." + [Environment]::NewLine)
})

$LPCINFO.Add_Click({
    $outputBox.AppendText("Getting local PC Information..." + [Environment]::NewLine)
    

    #INSERT SCRIPT TO PERFORM HERE

    $ComputerSystem = Get-WmiObject -Class Win32_ComputerSystem 
    $OperatingSystem = Get-WmiObject -Class Win32_OperatingSystem 
    $Bios = Get-WmiObject -Class Win32_BIOS
    $Battery = Get-WmiObject -Class Win32_Battery  
    $PhysicalMemory = Get-WmiObject -Class Win32_PhysicalMemory  -ErrorAction SilentlyContinue
    $DiskDrive = Get-WmiObject -Class Win32_DiskDrive  | Select-Object -First 1
    $Processor = Get-WmiObject -Class Win32_Processor 
    $HardDriveType = $DiskDrive.MediaType
    $MacAddress = Get-NetAdapter -Physical | Where-Object {$_.InterfaceDescription -match 'Ethernet'} | Select-Object -ExpandProperty MacAddress
    $IPAddresses = (Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter "IPEnabled='True'").IPAddress




    # Retrieve RAM information
    $MemoryPartNumber = $PhysicalMemory.PartNumber
    $MemoryCapacityGB = [Math]::Round(($PhysicalMemory.Capacity / 1GB), 2)

    # Retrieve hard drive information
    $HardDriveBrand = $DiskDrive.Manufacturer

    # Retrieve domain and OU information
    $adComputer = Get-WmiObject Win32_ComputerSystem
    $domain = $adComputer.Domain
    $computerName = $env:COMPUTERNAME
    $computerDN = ([adsisearcher]"(name=$computerName)").FindOne().Properties.distinguishedname
    $ou = ($computerDN -split ',', 2)[1]
             
          

    # Display computer information in same output box
    $Message = @"
Computer Name: $($ComputerSystem.Name)
Domain: $($domain)
OU: $($ou)
RAM: $($MemoryPartNumber), $($MemoryCapacityGB) GB 
Hard Drive: $($HardDriveBrand) $($HardDriveType), $([Math]::Round($DiskDrive.Size / 1GB, 2)) GB
Processor: $($Processor.Name)
IP Address: $($IPAddresses -join ', ')
MAC Address: $($MacAddress)
Serial Number: $($Bios.SerialNumber)
Battery Status: $($Battery.EstimatedChargeRemaining)%
------------------------------------------------------
Serial Number Automatically copies to your clipboard.

"@

    [System.Windows.Forms.Clipboard]::SetText($Bios.SerialNumber)

    logAction $Message
         
    $outputBox.AppendText("$Message" + [Environment]::NewLine)


})

$HDDSPEED.Add_Click({
    # Redirect the output of the script to a variable
    $output = & {
        $outputBox.AppendText("Running HDD Speed Test..." + [Environment]::NewLine)

        # Run winsat command and save results to variable
        $testResults = & winsat disk -drive c -ran -write -count 10

        # Display test results in console
        $testResults | Out-String -Stream | ForEach-Object { $outputBox.AppendText($_ + [Environment]::NewLine) }
        logAction $testResults 
    }

    # Display the output in your output box
    $output | Out-String -Stream | ForEach-Object { $outputBox.AppendText($_ + [Environment]::NewLine) }
})



$WIFIACCOUNT.Add_Click({
    $outputBox.AppendText("Starting WIFI Account Tool..." + [Environment]::NewLine)
    logAction "Starting WIFI Account Tool..."

    $profiles = netsh wlan show profile
    foreach ($line in $profiles) {
      if ($line -match "Profile\s*:\s*(.*)") {
        $ssid = $Matches[1].Trim().Replace(" ", "")
        $output = netsh wlan show profile name="$ssid" key=clear
        $keyContentLine = $output | Select-String "Key Content"
        if ($keyContentLine -match "Key Content\s*:\s*(.*)") {
          $password = $Matches[1].Trim()
          $outputBox.AppendText("SSID: $ssid, Password: $password" + [Environment]::NewLine)
          logAction "SSID: $ssid, Password: $password"
        }
        else {
          $outputBox.AppendText("SSID: $ssid, Password: Not found" + [Environment]::NewLine)
          logAction "SSID: $ssid, Password: Not found"
        }
      }
    }
})





$WindowsUpdate.Add_Click({
    $outputBox.AppendText("Opening Windows Update Panel..." + [Environment]::NewLine)
    start ms-settings:windowsupdate

})

$SerialNumber.Add_Click({
    $outputBox.AppendText("Getting Serial Number of PC..." + [Environment]::NewLine)
    $serialNumber = Get-WmiObject -Class Win32_BIOS | Select-Object -ExpandProperty SerialNumber
    $serialnumber
    $outputBox.AppendText("Serial Number: $serialNumber" + [Environment]::NewLine)
    $outputBox.AppendText("--------------------------------------------------------------------------" + [Environment]::NewLine)
    $outputBox.AppendText("The Serial number is automacially copied to clipboard." + [Environment]::NewLine)
    [System.Windows.Forms.Clipboard]::SetText($serialnumber)
})


####################################################################################
#END OF RIGHT SIDE APPLICATION
####################################################################################











#################################################################################################


#######       RUN AS ADMIN CHECK       #######
#######     TURNED OFF BY DEFAULT       #######

############################################################

# Verifies the application is being run with ADMIN- Account
#If ($env:UserName -like "ADMIN ACCOUNT PREFIX*") {
[void]$Form.ShowDialog()
#}
#Else {
#   $wshell.Popup("Please launch using ADMIN-Account.", 0, "Security Error")
#    $formMain.Close()
#}
